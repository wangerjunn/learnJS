http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014351226817991a9c08f1ec0a45c99b9209bcfc71b8f6000

//数据类型和变量

JavaScript不区分整数和浮点数，统一用Number表示

NaN 表示Not a Number,当无法计算结果时用NaN表示
Infinity 表示无限大，当数值超过了JavaScript的Number所能表示的最大值，就表示为Infinity

==表示相等运算符，它会自动转换数据类型再比较
===比较它不会自动转换数据类型，如果数据类型不一致，返回false，使用===比较

NaN这个特殊的Number与所有其他值都不相等，包括自己：NaN === NaN；//false

唯一能判断NaN的方法通过isNaN();

浮点数相等比较：
	浮点数在运算过程中会产生误差，比较浮点数是否相等，只能计算他们之差的绝对值，看是否小于某个阈值

null和undefined
	null表示一个空值，它和0以及空字符串''不同，0是一个数值，''表示长度为哦的字符串，null表示空
JavaScript把null、undefined、0、nan和空字符串‘’视为FALSE，其他值视为true

数组：是一组按顺序排列的集合，数组可以包括任意数据类型。[1,2,'HELLO'，false]；
	slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array：
	如果不给slice()传递任何参数，它就会从头到尾截取所有元素
	var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
	arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']
	arr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']

	push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：
	unshift和shift
	如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：
	var arr = [1, 2];
	arr.unshift('A', 'B'); // 返回Array新的长度: 4
	arr; // ['A', 'B', 1, 2]
	arr.shift(); // 'A'
	arr; // ['B', 1, 2]
	arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次
	arr; // []
	arr.shift(); // 空数组继续shift不会报错，而是返回undefined
	arr; // []

	reverse()把整个Array的元素给倒序，也就是反转
	splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素
	var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
	// 从索引2开始删除3个元素,然后再添加两个元素:
	arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']
	arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
	// 只删除,不添加:
	arr.splice(2, 2); // ['Google', 'Facebook']
	arr; // ['Microsoft', 'Apple', 'Oracle']
	// 只添加,不删除:
	arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素
	arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
	
对象：是一组由键-值组成的无序集合，例如:
var person = {
	name:'Bob',
	age:20
}
	获取对象属性，可用 对象变量.属性名:person.name
	由于JavaScript的对象是动态类型，可以自由的对对象添加/删除
	//删除  delete person.age
	//添加 person.height = 180;

	检测是否拥有某一个属性，可以用in操作符： 'name' in person;//true
	判断一个属性是否是自身拥有的，可用 hasOwnProperty()方法：
		eg: person.hasOwnProperty('name');//true

变量
	变量在JavaScript中就是用一个变量名表示，变量名是大小写英文、数字、$和_的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如if、while等。申明一个变量用var语句

strict模式
	JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量：

	i = 10; // i现在是全局变量

字符串：用''或""括起来的字符表示。如果'本身也是一个字符，那就可以用""括起来
	如果有很多变量需要连接，用+号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：
	var name = '小明';
	var age = 20;
	var message = `你好, ${name}, 你今年${age}岁了!`;
	alert(message);

循环：for循环的3个条件都是可以省略的，如果没有退出循环的判断条件，就必须使用break语句退出循环，否则就是死循环。
	eg:
		var x = 0;
		for(;;) { //将无限循环下去
			if(x > 100) {
				break;
			}
		}


	 for ... in ,它可以把一个对象的所有属性一次循环出来：
	 	eg: 
	 		var o = {
	 			name :'jack';
	 			age :13;
	 			city:'beijing'
	 		}

	 		for (var a in o) {
	 			alert(a);
	 		}

	array、map、set都属于iterable类型。具有iterable类型的集合可以通过for ... of循环便利,for ... of 是ES6引入的新语法
	
		var a = [1,23,4];
		for (var x of a) {

		}
    
	然后，更好的方式是直接使用iterable内置的foreach方法，每次迭代就自动调用该函数
	ES6引入

    eg :
    	var a = ['a','b','c'];

    	a.forEach(function(element,index,array)) {
    		//element指向当前元素的值
    		//index 当前索引下标
    		//array 指向array对象本身
    	};


    	//Set
    	var a = new Set(['a','n','d']);

    	a.forEach(function (element,sameElement,set)){

    	};

    	//map

    	var map = new Map([[1,'x'],[2,'y'],[3,'y']]);

    	map.forEach(function (value,key,map)){

    	};


函数
	
	1.函数定义和调用
		在JavaScript中，定义函数格式如下：
			function abs(x) {

				if(argument.length == 0) {
					return 0;
				}
				if x >= 0
					return x;


			}

	匿名函数 function (x) { ... },无函数名

	调用函数
	abs(10);

	传入的参数比定义的少也没有问题，eg:abs();//返回NaN
	JavaScript还有一个免费赠送的关键字argument，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数

	rest参数 
		ES6引入了rest参数,函数允许接收任意个参数
		function  foo(a,b,...rest) {
			console.log('a = ' +a);
		}

		//调用函数
		foo(1,2,3,4,5);
		//a=1，b=2,rest = [3,4,5];

	变量作用域
		如果内部函数和外部函数的变量重名，说明函数在查找变量时从自身函数定义开始，从'内'向'外'查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将'屏蔽'外部函数的变量。

	全局作用域
		不在任何函数内定义的变量就具有全局作用域。JavaScript默认有一个全局对象Window，全局作用域的变量实际上被绑定到window的一个属性

		‘use strict';
		var course = "learn JavaScript";
		alert(course);
		alert(window.course);

 		函数定义有两种方式，已变量方式var foo = function () {} 定义的函数实际上也是一个全局变量，因此顶层函数的定义也被视为一个全局变量，并绑定到window对象：

 		'use strict';
 		function foo () {
 			alert('foo');
 		}

 		foo();//直接调用foo();
 		window.foo();

 	名字空间；减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。
  
  		//唯一的全局变量MYAPP;

  		var MYAPP = {};

  		//其他变量：
  		MYAPP.name = 'myapp';
  		MYAPP。version = 1.0;

  		//其它函数：
  		MYAPP.foo = function () {
  			return 'foo';
  		};


  	局部作用域
  		由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句中是无法定义具有局部作用域的变量的:
  			'use strict';

  			function foo () {
  				for (var i = 0;i < 100; i++) {
  					//
  				}

  				i+=100;//仍然可以因拥抱变量I
  			}


  		为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：
  			'use strict';
  			fucntion foo {
  				var sum = 0;

  				for(let i = 0 ; i < 100; i++) {
  					sum += i;
  				}

  				i += 1; //syntaxError;
  			}


  	方法

  		'use strict';

  		var xiaoming = {
  			name: '小名',
  			birth : 1990,
  			age: function () {
  				var that = this;
  				function  getAgeFromBirth() {

  					let y = new Date().getFullYear;
  					return y - that.birth;
  				}
  			}
  		}

  		xiaoming.age();


  	apply：
  		要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接受两个参数，第一个参数：需要绑定的this变量，第二个参数：array，表示函数本身的参数。

  		用apply修复getAge()调用：

  			age: function () {
  				
  				function  getAgeFromBirth() {

  					let y = new Date().getFullYear;
  					return y -this.birth;
  				}
  			}

  			getAge.apply(xiaoming,[]);


 高阶函数（Higher-order function）

  		function add(x,y,f) {
  			return f(x)+f(y);
  		}

  		add(-5,6,Math.abs);

  	Map/Reduce

  		由于map()方法定义在JavaScript的array中，调用array的map()方法，传入自己的函数，得到新array为结果。

  		function pow(x) {
  			return x*x;
  		}	

  		var arr = [1,2,3,4,5];
  		arr.map(pow);//[1, 4, 9, 16, 25, 36, 49, 64, 81];

  		arr.map(String);// ['1', '2', '3', '4', '5', '6', '7', '8', '9']

  	Reduce
  		array的reduce()把一个函数作用房子这个array的[X1,X2...]上，这个函数必须接收两个参数，reduce()把结果作为下一个元素做累计计算

  		[x1,x2,x3,x4].reudce(f) = f(f(f(x1,x2),x3),x4);

  		var arr = [1,3,5,7,9];

  		arr.reduce(function (x,y) {
  			return x+y;
  		});//25

  		var arr = ['adam','LISA','barT'];

  		function transterLetter(x) {
  			
  		 	return x.toLowerCase();
  		}
  		arr.map(transterLetter);

  		function transterLetterUpperCase(x) {
  			return s.split('').[0].toUpperCase();
  		}

  		arr.map(transterLetterUpperCase);

  		'12345'.split('').map(Number);

  	filter

	  	var arr = [1,2,3,4,5];
	  	var r = arr.filter(funciton (x) {
	  		return x % 2 !== 0;
	  	});
	  	r;


  	回调函数

		filter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示Array的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身：

		var arr = ['A', 'B', 'C'];
		var r = arr.filter(function (element, index, self) {
		    console.log(element); // 依次打印'A', 'B', 'C'
		    console.log(index); // 依次打印0, 1, 2
		    console.log(self); // self就是变量arr
		    return true;
		});

		把一个Array中的空字符串删掉，可以这么写：
	  	var arr = ['A', '', 'B', null, undefined, 'C', '  '];
		var r = arr.filter(function (s) {
		    return s && s.trim(); // 注意：IE9以下的版本没有trim()方法
		});
		r; // ['A', 'B', 'C']


	Sort

			['Google','Apple','Microsoft'].sort();
		// apple排在了最后:字符串根据ASCII码进行排序，而小写字母a的ASCII码在大写字母之后
			['Google', 'apple', 'Microsoft'].sort(); // ['Google', 'Microsoft", 'apple']

		按数字大小排序，我们可以这么写:
			var arr = [10,2,5,20];
			arr.sort(function (x,y) {
				if (x < y) {
					return -1;
				}

				if (x > y) {
					return 1;
				}

				return 0;
			});

		//倒叙排序
			var arr = [10,2,5,20];
			arr.sort(function (x,y) {
				if (x < y) {
					return 1;
				}

				if (x > y) {
					return -1;
				}

				return 0;
			});

	闭包

		function lazy_sum(arr) {
			var sum = function () {
				return arr.reduce(function (x,y) {
					return x + y;
				});
			}

			return sum;
		}

		var sum = lazy_sum([1,2,3,4,5]);

		sum();

		function count () {
			var arr = [];

			for (var i = 1;i <= 3; i++) {
				arr.push(function () {
					return i*i;
				});
			}

			return arr;
		}

		var results = count();

		//创建一个匿名函数并立刻执行
		(function (x) {
			return x * x;
		})(3);

		'use strict';
		function create_counter(initial) {
			var x = initial || 0;
			return {
				inc: function () {
					x += 1;

					return x;
				}
			}
		}

		var c1 = create_counter();
		c1.inc();
		
		//Math.pow(x, n); x的n次方计算

	箭头函数
		ES6标准新增了一种新的函数：Arrow Function（箭头函数）。 x => x*x;
		箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式，一种像上面的，只包含一个表达式，连{ ... }和return都省略掉了。还有一种可以包含多条语句，这时候就不能省略{ ... }和return：

			x => {
				if (x > 0) {
					return x * x;
				}else {
					return -x * x;
				}
			}

		如果参数不是一个，就需要用括号()括起来：
			//两个参数:
			(x, y) => x * x + y * y;
			//无参数
			() => 3.14;
			//可变参数
			(x,y,...rest) => {
				var i, sum = x + y;
				for (i = 0; i < rest.length; i++) {
					sum += rest[i];
				}


				return sum;
			}

		返回一个对象
		x => ({ foo: x});


		var obj = {
			birth: 1990,
			getAge: function () {
				var b = this.birth;

				// this指向obj对象
				var fn = (x) => new Date().getFullYear() - this.birth;
				return fn();
			}
		};

		obj.getAge();

		由于this在箭头函数中已经按照词法作用域绑定了，所以，用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略：

		var obj = {
	    birth: 1990,
	    getAge: function (year) {
	        var b = this.birth; // 1990
	        var fn = (y) => y - this.birth; // this.birth仍是1990
	        return fn.call({birth:2000}, year);
	    	}
		};
		obj.getAge(2015); // 25

	generator(生成器)
		generator（生成器）是ES6标准引入的新的数据类型。一个generator看上去像一个函数，但可以返回多次。generator由function*定义,除了return语句，还可以用yield返回多次。

			function fib(max) {
				var t,
				a = 0;
				b = 1;
				arr = [0,1];

				while (arr.length < max) {
					t = a + b;
					a = b;
					b = t;
					arr.push(t);
				}

				return arr;
			}

			fib(5);


			function * fib(max) {
				var t,
				a = 0,
				b = 1,
				n = 1;

				while (n < max) {
					yield a;
					t = a + b;
					a = b;
					b = t;

					n ++;
				}

				return a;
			}

		  for (var x of fib(5)) {
    			console.log(x); // 依次输出0, 1, 1, 2, 3
			}
		  var f = fib(5);

		  f.next();
		  f.next();
		  f.next();
		  f.next();
		  f.next();


	标准对象
		在JavaScript的世界里，一切都是对象。为了区分对象的类型，用typeof操作符获取对象的类型，它总是返回一个字符串：
			typeof 123;//'number'
			typeof NaN; //'number'
			typeof 'str';//'string'
	包装对象:包装对象用new创建：
		var n = new Number(123);   ->Object
		var b = new Boolean(true);// Object
		var s = new String('str');// Object

		var n = Number('123'); // 123，相当于parseInt()或parseFloat()
		typeof n; // 'number'

		var b = Boolean('true'); // true
		typeof b; // 'boolean'

		var b2 = Boolean('false'); // true! 'false'字符串转换结果为true！因为它是非空字符串！
		var b3 = Boolean(''); // false

		var s = String(123.45); // '123.45'
		typeof s; // 'string'

		123..toString(); // '123', 注意是两个点！

	总结一下，有这么几条规则需要遵守：

		不要使用new Number()、new Boolean()、new String()创建包装对象；

		用parseInt()或parseFloat()来转换任意类型到number；

		用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；

		通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；

		typeof操作符可以判断出number、boolean、string、function和undefined；

		判断Array要使用Array.isArray(arr)；

		判断null请使用myVar === null；

		判断某个全局变量是否存在用typeof window.myVar === 'undefined'；

		函数内部判断某个变量是否存在用typeof myVar === 'undefined'。

		typeof操作符可以判断：number / boolean / string / function / undefined；
 		判断Array：用Array.isArray(myArr)；
 		判断null：用myVar === null；
 		判断某个全局变量是否存在：用typeof window.myVar === 'undefined'；
 		判断函数内部某个变量是否存在：用typeof myVar === 'undefined'；

 	Date
 		var date = new Date();
 		
 		创建一个指定日期和时间的Date对象:
 		var d = new Date(2015, 5, 19, 20, 15, 30, 123);
		d;// 1435146562875 返回结果时间戳

		//时间戳转date
		var d = new Date(1435146562875);
		d; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)
		d.toLocaleString(); // '2015/6/24 下午7:49:22'，本地时间（北京时区+8:00），显示的字符串与操作系统设定的格式有关
		d.toUTCString(); // 'Wed, 24 Jun 2015 11:49:22 GMT'，UTC时间，与本地时间相差8小时

		JavaScript的月份范围用整数表示是0~11

	RegExp(正则表达式)
		\d ：匹配一个数字
		\w ：匹配一个字母或数字
		.  ：可以匹配任意字符
		*  ：表示任意个字符
		+  ：表示至少一个字符
		?  ：表示0或1个字符
		\s ：表示可以匹配一个空格
		{n}:边上n个字符
		{n,m}:表示n~m个字符。eg:\d{3}\s+\d{3,8}

	JSON
		JSON是JavaScript Object Notation的缩写，它是一种数据交换格式。

	  序列化
		var xiaoming = {
			name:'小米',
			age: 14,
			gender:true,
			height:135,
			skills:['JavaScript','Java','Python','Lisp']
		};

		JSON.stringify(xiaoming);//"{"name":"小米","age":14,"gender":true,"height":135,"skills":["JavaScript","Java","Python","Lisp"]}"

		要输出的好看一些，可以加上参数，按缩进输出：
		JSON.stringify(xiaoming,null,' ');
		"{
			 "name": "小米",
			 "age": 14,
			 "gender": true,
			 "height": 135,
			 "skills": [
					  "JavaScript",
					  "Java",
					  "Python",
					  "Lisp"
			 		]
			}"
		第二个参数用于控制如何筛选对象的键值，如果我们只想输出指定的属性，可以传入Array：
		JSON.stringify(xiaoming, ['name', 'skills'], '  ');

		"{
			 "name": "小米",
			 "skills": [
			  "JavaScript",
			  "Java",
			  "Python",
			  "Lisp"
			 ]
			}"

	  反序列化:拿到JSON格式的字符串，用JSON.parse()把它变成一个JavaScript对象
	  JSON.parse('{"name":"小明","age":14}'); // Object {name: '小明', age: 14}

面向对象编程
		JavaScript不区分类和实例的概念，而是通过原型(prototype)来实现面向对象编程。

		var Student = {
			name: 'Robot',
			height: 1.77,
			run: function() {
				console.log(this.name + ' is running...');
			}
		}

		JSON.stringify(Student);

		var xiaoming = {
			name: '小米'
		};

		xiaoming.__proto__ = Student;

		以上代码仅用于演示，编写代码时不宜直接用object.__proto__去改变一个对象的原型，低版本IE无法使用__proto__。object.create()方法传入一个原型对象，并创建一个基于该原型的新对象

		var s = Object.create(Student);

	创建对象

		当我们用obj.xxx访问一个对象的属性时，JavaScript引擎先在当前对象上查找该属性，如果没有找到，就到其原型对象上找，如果还没有找到，就一直上溯到Object.prototype对象，最后，如果还没有找到，就只能返回undefined。

		var arr = [1,2,3];
		其原型链：arr->Array.prototype->Object.prototype->null

		当我们创建一个函数时：
		function () {
			return 0;
		}

		它的原型链:foo->Function.prototype->Object.prototype->null

		function Student(name) {
		    this.name = name;
		    this.hello = function () {
		        alert('Hello, ' + this.name + '!');
		    }
		}

		在JavaScript中，可以用关键字new来调用这个函数，并返回一个对象：
		var s = new Student('小米');

	原型继承
		// PrimaryStudent构造函数：
		function PrimaryStudent(props) {
			Student.call(this,props);
			this.grade = props.grade || 1;
		}

		//空函数F
		function F() {

		}

		//把F的原型指向Student.prototype
		F.prototype = Student.prototype;

		//把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype
		PrimaryStudent.prototype = new F();

		//把PrimaryStudent原型的构造函数修复为PrimaryStudent;
		PrimaryStudent.prototype.constructor = PrimaryStudent;

		//继续在PrimaryStudent原型(就是new F()对象)上定义方法：
		PrimaryStudent.prototype.getGrade = function () {
			return this.grade;
		}

		//创建xiaoming
		var xiaoming = new PrimaryStudent ({
			name:'小米',
			grade:2
		});

		xiaoming.name;
		xiaoming.grade;

		//验证原型
		xiaoming instanceof PrimaryStudent;//true
		xiaoming isntanceof Student;//true

	class继承
		class Student {
			constructor(name) {
				this.name = name;
			}

			hello() {
				alert('Hello, '+this.name+'!');
			}
		}

		var xiaoming = new Student('项目');
		xiaoming.hello();

		class PrimaryStudent extends Student {
			constructor(name,grade) {
				super(name);
				this.grade = grade;
			}

			myGrade() {
				alert('I am at grade '+ this.grade);
			}
		}


























